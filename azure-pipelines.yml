trigger:
  - development
  - production
  - stage
  - ci-cd


resources:
  - repo: self
  
variables:
- group: GITAUTH
- ${{ if eq(variables['build.SourceBranchName'], 'ci-cd') }}:
  - group: development
- ${{ if eq(variables['build.SourceBranchName'], 'development') }}:
  - group: development
- ${{ if eq(variables['build.SourceBranchName'], 'stage') }}:
  - group: stage
- ${{ if eq(variables['build.SourceBranchName'], 'production') }}:
  - group: production
- name: dockerfilePath
  value: '$(Build.SourcesDirectory)/Dockerfile'
- name: imageRepository
  value: 'ameta-banking-core'
- name: tag
  value: '$(Build.BuildId)'
- name: k8sNamespace
  value: 'platform-web'
- name: vmImageName
  value: 'ubuntu-latest'
  

  
stages: 
- stage: Build
  displayName: Build And Push Stage
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage: $(vmImageName)
  
    steps:
      - checkout: self
        fetchDepth: 0
      - task: Bash@3
        displayName: Building Dockerfile
        inputs:
          targetType: 'inline'
          script: |
              docker build -t $(containerRegistry)/${IMAGEREPOSITORY}:${TAG} -t $(containerRegistry)/${IMAGEREPOSITORY}:latest -f ${DOCKERFILEPATH} .
        env:
          containerRegistry: $(containerRegistry)
          
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          command: push
          repository: $(imageRepository)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(tag)
            latest
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool: 
      name: $(Build.SourceBranchName)
      demands:
      - Project -equals Ameta
      - Agent.Name -equals jump-server-ameta-dev
    environment: $(Build.SourceBranchName) 
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: Bash@3
            displayName: Change Container Image
            inputs:
              targetType: 'inline'
              script: |
                  set -e
                  sed -i -e 's/ACR/'"${containerRegistry}"'/' $(Pipeline.Workspace)/s/manifests/deployment.yaml
                  sed -i -e 's/IMAGE_REGISTRY/'"$(imageRepository)"'/' $(Pipeline.Workspace)/s/manifests/deployment.yaml
                  sed -i -e 's/TAG/'"$(tag)"'/' $(Pipeline.Workspace)/s/manifests/deployment.yaml
            env:
              containerRegistry: $(containerRegistry)
          - task: Bash@3
            displayName: Configuring resource limit and requests
            inputs:
              targetType: 'inline'
              script: |
                  set -e
                  if [ "${BUILD_SOURCEBRANCHNAME}" == "development" ]; then
                    echo "Pulling variables for dev"
                    yq eval '.spec.rules[0].host = "$(HOSTNAME-DEVELOPMENT)"' -i $(Pipeline.Workspace)/s/manifests/ingress.yaml
                    yq eval '.spec.tls[0].hosts = ["$(HOSTNAME-DEVELOPMENT)"]' -i $(Pipeline.Workspace)/s/manifests/ingress.yaml
                    
                  elif [ "${BUILD_SOURCEBRANCHNAME}" == "stage" ]; then
                    echo "Pulling variables for stage"
                    yq eval '.spec.rules[0].host = "$(HOSTNAME-STAGE)"' -i $(Pipeline.Workspace)/s/manifests/ingress.yaml
                    yq eval '.spec.tls[0].hosts = ["$(HOSTNAME-STAGE)"]' -i $(Pipeline.Workspace)/s/manifests/ingress.yaml
                    
                  elif [ "${BUILD_SOURCEBRANCHNAME}" == "production" ]; then
                    echo "Pulling variables for production"
                    yq eval '.spec.rules[0].host = "$(HOSTNAME-PRODUCTION)"' -i $(Pipeline.Workspace)/s/manifests/ingress.yaml
                    yq eval '.spec.tls[0].hosts = ["$(HOSTNAME-PRODUCTION)"]' -i $(Pipeline.Workspace)/s/manifests/ingress.yaml

                  fi
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              action: deploy
              namespace: $(k8sNamespace)
              manifests: |
                $(Pipeline.Workspace)/s/manifests/ingress.yaml
                $(Pipeline.Workspace)/s/manifests/service.yaml
                $(Pipeline.Workspace)/s/manifests/deployment.yaml
                # $(Pipeline.Workspace)/s/manifests/hpa.yaml
 
